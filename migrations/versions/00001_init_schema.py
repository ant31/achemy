"""init_schema

Revision ID: 00001
Revises:
Create Date: 2025-04-18 10:00:00.000000

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "00001"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None

# SQL for the trigger function
trigger_function_sql = """
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
"""

# SQL to drop the trigger function
drop_trigger_function_sql = "DROP FUNCTION IF EXISTS trigger_set_timestamp();"

# SQL templates for creating triggers
create_trigger_sql_template = """
CREATE TRIGGER set_timestamp_update
  BEFORE UPDATE ON {table_name}
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_set_timestamp();
"""

# SQL templates for dropping triggers
drop_trigger_sql_template = "DROP TRIGGER IF EXISTS set_timestamp_update ON {table_name};"


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create the trigger function
    op.execute(trigger_function_sql)

    # Create country table
    op.create_table(
        "country",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("code", sa.Text(), nullable=True),
        sa.Column("population", sa.Integer(), nullable=True),
        sa.Column("id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_country")),
        sa.UniqueConstraint("code", name=op.f("uq_country_code")),
        sa.UniqueConstraint("name", name=op.f("uq_country_name")),
    )
    op.execute(create_trigger_sql_template.format(table_name="country"))

    # Create resident table
    op.create_table(
        "resident",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("last_name", sa.Text(), nullable=True),
        sa.Column("email", sa.Text(), nullable=True),
        sa.Column("id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_resident")),
    )
    op.execute(create_trigger_sql_template.format(table_name="resident"))

    # Create city table
    op.create_table(
        "city",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("country_id", sa.Uuid(), nullable=True),
        sa.Column("population", sa.Integer(), nullable=True),
        sa.Column("id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.ForeignKeyConstraint(["country_id"], ["country.id"], name=op.f("fk_city_country_id_country")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_city")),
        sa.UniqueConstraint("name", "country_id", name=op.f("uq_city_name_country")),
    )
    op.execute(create_trigger_sql_template.format(table_name="city"))

    # Create resident_city table
    op.create_table(
        "resident_city",
        sa.Column("city_id", sa.Uuid(), nullable=True),
        sa.Column("resident_id", sa.Uuid(), nullable=True),
        sa.Column("main_residence", sa.Boolean(), nullable=False, server_default=sa.true()),
        sa.Column("id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.ForeignKeyConstraint(["city_id"], ["city.id"], name=op.f("fk_resident_city_city_id_city")),
        sa.ForeignKeyConstraint(["resident_id"], ["resident.id"], name=op.f("fk_resident_city_resident_id_resident")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_resident_city")),
        sa.UniqueConstraint("resident_id", "city_id", name=op.f("uq_resident_city")),
    )
    op.execute(create_trigger_sql_template.format(table_name="resident_city"))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop triggers first
    op.execute(drop_trigger_sql_template.format(table_name="resident_city"))
    op.execute(drop_trigger_sql_template.format(table_name="city"))
    op.execute(drop_trigger_sql_template.format(table_name="resident"))
    op.execute(drop_trigger_sql_template.format(table_name="country"))

    # Drop tables (order matters due to foreign keys)
    op.drop_table("resident_city")
    op.drop_table("city")
    op.drop_table("resident")
    op.drop_table("country")

    # Drop the trigger function
    op.execute(drop_trigger_function_sql)

    # ### end Alembic commands ###
